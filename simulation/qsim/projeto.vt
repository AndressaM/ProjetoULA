// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/11/2014 14:23:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ulaMsb
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ulaMsb_vlg_sample_tst(
	A,
	AIN,
	B,
	BIN,
	CIN,
	LESS,
	OPERATION,
	sampler_tx
);
input  A;
input  AIN;
input  B;
input  BIN;
input  CIN;
input  LESS;
input [1:0] OPERATION;
output sampler_tx;

reg sample;
time current_time;
always @(A or AIN or B or BIN or CIN or LESS or OPERATION)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ulaMsb_vlg_check_tst (
	COUT,
	OVERFLOW,
	RESULT,
	SET,
	sampler_rx
);
input  COUT;
input  OVERFLOW;
input  RESULT;
input  SET;
input sampler_rx;

reg  COUT_expected;
reg  OVERFLOW_expected;
reg  RESULT_expected;
reg  SET_expected;

reg  COUT_prev;
reg  OVERFLOW_prev;
reg  RESULT_prev;
reg  SET_prev;

reg  COUT_expected_prev;
reg  OVERFLOW_expected_prev;
reg  RESULT_expected_prev;
reg  SET_expected_prev;

reg  last_COUT_exp;
reg  last_OVERFLOW_exp;
reg  last_RESULT_exp;
reg  last_SET_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	COUT_prev = COUT;
	OVERFLOW_prev = OVERFLOW;
	RESULT_prev = RESULT;
	SET_prev = SET;
end

// update expected /o prevs

always @(trigger)
begin
	COUT_expected_prev = COUT_expected;
	OVERFLOW_expected_prev = OVERFLOW_expected;
	RESULT_expected_prev = RESULT_expected;
	SET_expected_prev = SET_expected;
end



// expected COUT
initial
begin
	COUT_expected = 1'bX;
end 

// expected OVERFLOW
initial
begin
	OVERFLOW_expected = 1'bX;
end 

// expected RESULT
initial
begin
	RESULT_expected = 1'bX;
end 

// expected SET
initial
begin
	SET_expected = 1'bX;
end 
// generate trigger
always @(COUT_expected or COUT or OVERFLOW_expected or OVERFLOW or RESULT_expected or RESULT or SET_expected or SET)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected COUT = %b | expected OVERFLOW = %b | expected RESULT = %b | expected SET = %b | ",COUT_expected_prev,OVERFLOW_expected_prev,RESULT_expected_prev,SET_expected_prev);
	$display("| real COUT = %b | real OVERFLOW = %b | real RESULT = %b | real SET = %b | ",COUT_prev,OVERFLOW_prev,RESULT_prev,SET_prev);
`endif
	if (
		( COUT_expected_prev !== 1'bx ) && ( COUT_prev !== COUT_expected_prev )
		&& ((COUT_expected_prev !== last_COUT_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUT_expected_prev);
		$display ("     Real value = %b", COUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COUT_exp = COUT_expected_prev;
	end
	if (
		( OVERFLOW_expected_prev !== 1'bx ) && ( OVERFLOW_prev !== OVERFLOW_expected_prev )
		&& ((OVERFLOW_expected_prev !== last_OVERFLOW_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVERFLOW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVERFLOW_expected_prev);
		$display ("     Real value = %b", OVERFLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OVERFLOW_exp = OVERFLOW_expected_prev;
	end
	if (
		( RESULT_expected_prev !== 1'bx ) && ( RESULT_prev !== RESULT_expected_prev )
		&& ((RESULT_expected_prev !== last_RESULT_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RESULT_exp = RESULT_expected_prev;
	end
	if (
		( SET_expected_prev !== 1'bx ) && ( SET_prev !== SET_expected_prev )
		&& ((SET_expected_prev !== last_SET_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SET :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SET_expected_prev);
		$display ("     Real value = %b", SET_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SET_exp = SET_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ulaMsb_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg AIN;
reg B;
reg BIN;
reg CIN;
reg LESS;
reg [1:0] OPERATION;
// wires                                               
wire COUT;
wire OVERFLOW;
wire RESULT;
wire SET;

wire sampler;                             

// assign statements (if any)                          
ulaMsb i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AIN(AIN),
	.B(B),
	.BIN(BIN),
	.CIN(CIN),
	.COUT(COUT),
	.LESS(LESS),
	.OPERATION(OPERATION),
	.OVERFLOW(OVERFLOW),
	.RESULT(RESULT),
	.SET(SET)
);

// A
initial
begin
	A = 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #20000 1'b0;
	A = #5000 1'b1;
	A = #15000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #5000 1'b1;
	A = #15000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #15000 1'b0;
	A = #10000 1'b1;
	A = #40000 1'b0;
	A = #5000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #30000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #20000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #10000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #15000 1'b0;
	A = #10000 1'b1;
	A = #15000 1'b0;
	A = #5000 1'b1;
	A = #20000 1'b0;
	A = #15000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #15000 1'b1;
	A = #15000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #15000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #15000 1'b1;
	A = #20000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #5000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #50000 1'b0;
	A = #5000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #15000 1'b1;
	A = #5000 1'b0;
	A = #10000 1'b1;
	A = #25000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #15000 1'b1;
	A = #30000 1'b0;
	A = #10000 1'b1;
	A = #15000 1'b0;
	A = #5000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
	A = #5000 1'b1;
	A = #25000 1'b0;
	A = #10000 1'b1;
	A = #5000 1'b0;
end 

// AIN
initial
begin
	AIN = 1'b0;
	AIN = #15000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #25000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #15000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #20000 1'b0;
	AIN = #15000 1'b1;
	AIN = #5000 1'b0;
	AIN = #10000 1'b1;
	AIN = #40000 1'b0;
	AIN = #15000 1'b1;
	AIN = #20000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #10000 1'b1;
	AIN = #5000 1'b0;
	AIN = #10000 1'b1;
	AIN = #15000 1'b0;
	AIN = #15000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #10000 1'b1;
	AIN = #5000 1'b0;
	AIN = #20000 1'b1;
	AIN = #5000 1'b0;
	AIN = #15000 1'b1;
	AIN = #10000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #10000 1'b0;
	AIN = #5000 1'b1;
	AIN = #20000 1'b0;
	AIN = #10000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #20000 1'b1;
	AIN = #10000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #30000 1'b1;
	AIN = #5000 1'b0;
	AIN = #15000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #10000 1'b1;
	AIN = #15000 1'b0;
	AIN = #5000 1'b1;
	AIN = #20000 1'b0;
	AIN = #5000 1'b1;
	AIN = #20000 1'b0;
	AIN = #15000 1'b1;
	AIN = #20000 1'b0;
	AIN = #5000 1'b1;
	AIN = #25000 1'b0;
	AIN = #5000 1'b1;
	AIN = #15000 1'b0;
	AIN = #10000 1'b1;
	AIN = #5000 1'b0;
	AIN = #20000 1'b1;
	AIN = #5000 1'b0;
	AIN = #10000 1'b1;
	AIN = #15000 1'b0;
	AIN = #10000 1'b1;
	AIN = #5000 1'b0;
	AIN = #5000 1'b1;
	AIN = #10000 1'b0;
	AIN = #5000 1'b1;
	AIN = #10000 1'b0;
	AIN = #5000 1'b1;
	AIN = #20000 1'b0;
	AIN = #5000 1'b1;
	AIN = #5000 1'b0;
	AIN = #15000 1'b1;
	AIN = #10000 1'b0;
	AIN = #10000 1'b1;
	AIN = #10000 1'b0;
	AIN = #10000 1'b1;
end 

// B
initial
begin
	B = 1'b1;
	B = #15000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #5000 1'b1;
	B = #10000 1'b0;
	B = #5000 1'b1;
	B = #30000 1'b0;
	B = #5000 1'b1;
	B = #20000 1'b0;
	B = #15000 1'b1;
	B = #10000 1'b0;
	B = #15000 1'b1;
	B = #15000 1'b0;
	B = #5000 1'b1;
	B = #10000 1'b0;
	B = #5000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
	B = #15000 1'b1;
	B = #5000 1'b0;
	B = #20000 1'b1;
	B = #35000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #30000 1'b0;
	B = #5000 1'b1;
	B = #20000 1'b0;
	B = #5000 1'b1;
	B = #15000 1'b0;
	B = #5000 1'b1;
	B = #10000 1'b0;
	B = #5000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #5000 1'b1;
	B = #20000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #5000 1'b1;
	B = #10000 1'b0;
	B = #20000 1'b1;
	B = #5000 1'b0;
	B = #5000 1'b1;
	B = #35000 1'b0;
	B = #20000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #5000 1'b1;
	B = #10000 1'b0;
	B = #5000 1'b1;
	B = #25000 1'b0;
	B = #5000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
	B = #15000 1'b1;
	B = #10000 1'b0;
	B = #5000 1'b1;
	B = #20000 1'b0;
	B = #5000 1'b1;
	B = #45000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #20000 1'b1;
	B = #5000 1'b0;
	B = #5000 1'b1;
	B = #5000 1'b0;
	B = #5000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #10000 1'b1;
	B = #15000 1'b0;
	B = #5000 1'b1;
	B = #15000 1'b0;
	B = #10000 1'b1;
	B = #5000 1'b0;
	B = #5000 1'b1;
	B = #10000 1'b0;
	B = #20000 1'b1;
end 

// BIN
initial
begin
	BIN = 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #10000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #20000 1'b0;
	BIN = #10000 1'b1;
	BIN = #10000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #10000 1'b0;
	BIN = #10000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #10000 1'b0;
	BIN = #5000 1'b1;
	BIN = #10000 1'b0;
	BIN = #25000 1'b1;
	BIN = #10000 1'b0;
	BIN = #10000 1'b1;
	BIN = #5000 1'b0;
	BIN = #25000 1'b1;
	BIN = #10000 1'b0;
	BIN = #20000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #20000 1'b0;
	BIN = #20000 1'b1;
	BIN = #10000 1'b0;
	BIN = #20000 1'b1;
	BIN = #20000 1'b0;
	BIN = #5000 1'b1;
	BIN = #40000 1'b0;
	BIN = #15000 1'b1;
	BIN = #5000 1'b0;
	BIN = #20000 1'b1;
	BIN = #10000 1'b0;
	BIN = #15000 1'b1;
	BIN = #5000 1'b0;
	BIN = #15000 1'b1;
	BIN = #10000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #10000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #20000 1'b1;
	BIN = #5000 1'b0;
	BIN = #10000 1'b1;
	BIN = #25000 1'b0;
	BIN = #5000 1'b1;
	BIN = #20000 1'b0;
	BIN = #10000 1'b1;
	BIN = #15000 1'b0;
	BIN = #5000 1'b1;
	BIN = #10000 1'b0;
	BIN = #15000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #10000 1'b1;
	BIN = #10000 1'b0;
	BIN = #5000 1'b1;
	BIN = #10000 1'b0;
	BIN = #10000 1'b1;
	BIN = #10000 1'b0;
	BIN = #10000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #20000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #20000 1'b1;
	BIN = #5000 1'b0;
	BIN = #10000 1'b1;
	BIN = #5000 1'b0;
	BIN = #15000 1'b1;
	BIN = #5000 1'b0;
	BIN = #5000 1'b1;
	BIN = #45000 1'b0;
	BIN = #5000 1'b1;
	BIN = #30000 1'b0;
	BIN = #5000 1'b1;
	BIN = #5000 1'b0;
	BIN = #15000 1'b1;
	BIN = #5000 1'b0;
end 

// CIN
initial
begin
	CIN = 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #5000 1'b0;
	CIN = #25000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #15000 1'b0;
	CIN = #5000 1'b1;
	CIN = #15000 1'b0;
	CIN = #15000 1'b1;
	CIN = #5000 1'b0;
	CIN = #30000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #15000 1'b0;
	CIN = #15000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #25000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #15000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #25000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #30000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #10000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #5000 1'b0;
	CIN = #15000 1'b1;
	CIN = #15000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #15000 1'b1;
	CIN = #10000 1'b0;
	CIN = #25000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #20000 1'b0;
	CIN = #15000 1'b1;
	CIN = #10000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #40000 1'b1;
	CIN = #25000 1'b0;
	CIN = #30000 1'b1;
	CIN = #20000 1'b0;
	CIN = #10000 1'b1;
	CIN = #10000 1'b0;
	CIN = #5000 1'b1;
	CIN = #20000 1'b0;
	CIN = #10000 1'b1;
	CIN = #10000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #15000 1'b0;
	CIN = #5000 1'b1;
	CIN = #10000 1'b0;
	CIN = #5000 1'b1;
	CIN = #10000 1'b0;
	CIN = #5000 1'b1;
	CIN = #15000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #15000 1'b0;
	CIN = #5000 1'b1;
	CIN = #15000 1'b0;
	CIN = #10000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
	CIN = #5000 1'b0;
	CIN = #10000 1'b1;
	CIN = #5000 1'b0;
	CIN = #5000 1'b1;
end 

// LESS
initial
begin
	LESS = 1'b0;
	LESS = #30000 1'b1;
	LESS = #20000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #5000 1'b1;
	LESS = #15000 1'b0;
	LESS = #5000 1'b1;
	LESS = #10000 1'b0;
	LESS = #5000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #5000 1'b1;
	LESS = #5000 1'b0;
	LESS = #5000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #5000 1'b1;
	LESS = #10000 1'b0;
	LESS = #40000 1'b1;
	LESS = #10000 1'b0;
	LESS = #5000 1'b1;
	LESS = #10000 1'b0;
	LESS = #10000 1'b1;
	LESS = #10000 1'b0;
	LESS = #5000 1'b1;
	LESS = #20000 1'b0;
	LESS = #5000 1'b1;
	LESS = #10000 1'b0;
	LESS = #10000 1'b1;
	LESS = #35000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #15000 1'b1;
	LESS = #5000 1'b0;
	LESS = #20000 1'b1;
	LESS = #10000 1'b0;
	LESS = #15000 1'b1;
	LESS = #55000 1'b0;
	LESS = #5000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #5000 1'b1;
	LESS = #10000 1'b0;
	LESS = #15000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #25000 1'b0;
	LESS = #5000 1'b1;
	LESS = #15000 1'b0;
	LESS = #5000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #10000 1'b0;
	LESS = #20000 1'b1;
	LESS = #25000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #10000 1'b0;
	LESS = #5000 1'b1;
	LESS = #20000 1'b0;
	LESS = #5000 1'b1;
	LESS = #15000 1'b0;
	LESS = #5000 1'b1;
	LESS = #5000 1'b0;
	LESS = #20000 1'b1;
	LESS = #5000 1'b0;
	LESS = #5000 1'b1;
	LESS = #10000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #10000 1'b1;
	LESS = #5000 1'b0;
	LESS = #15000 1'b1;
	LESS = #5000 1'b0;
	LESS = #5000 1'b1;
	LESS = #10000 1'b0;
	LESS = #15000 1'b1;
	LESS = #20000 1'b0;
	LESS = #5000 1'b1;
	LESS = #5000 1'b0;
	LESS = #40000 1'b1;
	LESS = #10000 1'b0;
end 
// OPERATION[ 1 ]
initial
begin
	OPERATION[1] = 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #25000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #15000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #25000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #30000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #20000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #15000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #15000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #55000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #20000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #15000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #15000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #25000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #20000 1'b0;
	OPERATION[1] = #15000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #10000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #5000 1'b0;
	OPERATION[1] = #5000 1'b1;
	OPERATION[1] = #10000 1'b0;
	OPERATION[1] = #5000 1'b1;
end 
// OPERATION[ 0 ]
initial
begin
	OPERATION[0] = 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #20000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #20000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #25000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #20000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #20000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #30000 1'b1;
	OPERATION[0] = #75000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #20000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #15000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #10000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #20000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #20000 1'b0;
	OPERATION[0] = #15000 1'b1;
	OPERATION[0] = #10000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
	OPERATION[0] = #5000 1'b1;
	OPERATION[0] = #5000 1'b0;
end 

ulaMsb_vlg_sample_tst tb_sample (
	.A(A),
	.AIN(AIN),
	.B(B),
	.BIN(BIN),
	.CIN(CIN),
	.LESS(LESS),
	.OPERATION(OPERATION),
	.sampler_tx(sampler)
);

ulaMsb_vlg_check_tst tb_out(
	.COUT(COUT),
	.OVERFLOW(OVERFLOW),
	.RESULT(RESULT),
	.SET(SET),
	.sampler_rx(sampler)
);
endmodule

